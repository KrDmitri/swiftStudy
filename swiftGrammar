import UIKit


// 변수 var
var greeting = "Hello, playground"

var age = 10

// Sage type
//age = "hello"  // 타입을 바꿀 수 없다


// 상수 let : 값이 변하지 않음
let guestName = "john"


// Type Annotations
var str: String = "Hello, World"

var yourAge: Int = 22

var screenHeight: Float = 560

var sum = yourAge + Int(screenHeight)


// Booleans
var isOpen: Bool = false

if isOpen{
    
}else{
    
}

// Tuples
var topTitle = ("메인화면", "mainIcon.png")

topTitle.0
topTitle.1

// Tuples 이용한 http status code
var httpError = (statusCode : 404, description: "not found")

httpError.statusCode
httpError.description


// Optionals (옵셔널)
// 값이 있을 수도 있고, 없을 수도 있다.

// 값이 있다(0 -> 다쓴 상태인 값), 값이 없다 -> nil
var myAge: Int? = 0 // 옆의 물음표가 Int형 변수가 nil값을 받게 해주는 옵셔널 형태로 만들어줌
myAge = nil

// 값이 없는 상태 체크 -> 틀린 로직
if myAge == 0{
    // alert - 나이를 입력해 주세요.
}

// 정확한 로직
if myAge == nil{
    // alert - 나이를 입력해 주세요.
}

var noName: String?

if noName == nil{
    // alert - 이름을 입력해 주세요.
}

// 옵셔널 그냥 사용할 수 없는 경우가 많이 있음
var a: Int? = 10
var b: Int? = 20

// unwrap(Int? -> Int)

// coalesce
var c = (a ?? 0) + (b ?? 0) // ??는 옵셔널 변수의 값이 nil일 때 어떤 값을 넣어줄지 결정

// force unwrap -> 강제로, 힘으로(주의사항 : 변수에 값이 없으면 앱이 죽어버린다)
var d = a! + b!

// Unwrapping(if Statements)

if a != nil{
    print(a)
}

// if let, if var
if let hasNumber = a{
    print(hasNumber)
}

if var hasNumber = a{
    hasNumber = hasNumber * 2
    print(hasNumber)
}

// guard let, guard var
func testFunc(){
    guard let num = a else{    // a에 숫자가 없으면 return 해버려서 testFunc의 다른 코드 실행을 안함
        return
    }
    print(num)
    print("end")
}
testFunc()

func testFunc2(){
    guard var num2 = a else{
        return
    }
    num2 = num2 * 2
    print(num2)
    print("end")
}
testFunc2()


// unicode 범위관련
// 숫자만 입력받을 수 있어야 한다

let inputValue = "9"

if inputValue >= "\u{30}" && inputValue <= "\u{39}"{
    print("숫자다")
}else{
    print("숫자가 아니다")
}

// 영어만 입력해야 한다.
"\u{41}"
"\u{7a}"

// String

let myName = "lee\nmin\nhi"

let myLongStr =
"""
hi
hello
welcome
"""

print(myLongStr)

let isOn = true
isOn.description

let myNumber = 123
myNumber.description

"my nummber is \(myNumber)"

let strPrac: String = "String for practice"

// String의 메서드들
// last, dropLast(), first
strPrac.last
strPrac.dropLast()
strPrac.first

let strPrac2: String = "12.33"

// split(separator: )
strPrac2.split(separator: ".")


//Collection Types, 집합 타입

// Array
var myNames = Array<String>()
var myAges = [Int]()

myNames.append("kim")
myNames.append("lee")
myNames.append("jin")

myNames[2]

// 방어코드(안전한 코딩 스타일)
let index = 2
if myNames.count > index{
    myNames[index]
}

myNames.append(contentsOf: ["hi", "hello"])
myNames = myNames + ["bye"]

myNames.removeAll()
if myNames.isEmpty{
    print("empty")
}

myNames.insert("haha", at: 0)
myNames.append(contentsOf: ["hi", "hello"])

for name in myNames{
    print(name + "님")
}

for (index, name) in myNames.enumerated(){
    print(index, name)
}


// set

var names = Set<String>()
names.insert("lee")
names.insert("kim")
names.insert("park")

names

var sameNames = ["lee", "lee", "park"]
Set(sameNames)

var nameSet: Set = ["park","park", "lee"]

var numbers1: Set = [1, 2, 3, 4, 5]
var numbers2: Set = [4, 5, 6, 7, 8]

// 교집합
numbers1.intersection(numbers2)

// 합집합
numbers1.union(numbers2)

// 합집합 - 교집합 (대칭차집합)
numbers1.symmetricDifference(numbers2)

// 여집합
numbers1.subtracting(numbers2)


// Dictionary

var namesOfStreet = [String : Any]()

namesOfStreet["301ro"] = "1st street"
namesOfStreet["302ro"] = 2
namesOfStreet["303ro"] = "3rd street"

namesOfStreet["301ro"]
namesOfStreet

var namesOfStreet2 = ["a" : 1, "b" : 2, "c" : 3]

for dic in namesOfStreet{
    print(dic)
}


// Control Flow (흐름 제어)

// for

let name = "234234234"

for char in name{
    print((Int(String(char)) ?? 0) * 10)
}

for index in 0...5{
    print(index)
}

for index in 0..<5{
    print(index)
}


// while (주의) - 왠만하면 사용하지 않는게 좋다
// 무한으로 반복문안에서 계속 실행되는 경우 -> 멈춰버림

var a = 0

while a < 10{
    a = a + 1
    print("계속 실행")
}


// Switch 조건에 케이스를 만들어서 분기

let b = "a"
switch b{
case "a", "b", "c":
    print("a or b or c")
case "d":
    print("d")
default:
    print("other")
}


let num = 3
switch num{
case 1:
    print("num 1")
case 2...5:
    print("num 2~5")
default:
    print("other")
}


let a = 10
let b = 20

func plus(num1: Int, num2: Int) -> Int{
    return num1 + num2
}

let sum = plus(num1: a, num2: b)
sum


func plus2(num1: Int, num2: Int) -> (String, Int){
    return("결과값은", num1 + num2)
}

let p = plus(num1: a, num2: b)
p

// 함수 호출 중 굳이 변수 이름까지 안쓰게 하고 싶을 때
func plus3(_ num1: Int, _ num2: Int) -> Int{
    return num1 + num2
}

let q = plus3(a, b)
q


// Closure(클로저)
// func와 유사하나 이름이 없다

// function
func myScore(_ a: Int) -> String{
    return "\(a)점"
}

let b: String = myScore(50)

// closure
let myScore2 = { (a: Int) -> String in
    return "\(a)점"
}
let c: String = myScore2(60)

// 축약(생략)
let myScore3 = { (a: Int) -> String in
    "\(a)점"
}  // 줄이 하나만 있을 경우 return 생략 가능

let myScore4 = { (a: Int) in
    "\(a)점"
}  // 반환 타입이 명확할 경우 반환 타입 명시 생략 가능

let myScore5: (Int) -> String = { a in
    "\(a)점"
}

let myScore6: (Int, Int, Int) -> String = {
    "\($0 + $1 + $2)점"
}  // in 생략하고 $표시로 파라미터 이용 가능


// Closure 실전

// 조건1 : 특정한 글자가 포함된 것을 찾는다
// 조거2 : 입력한 글자로 시작하는 글자를 찾는다
let names = ["apple", "air", "brown", "red", "orange", "blue", "candy", "hobby"]

let containsSomeText: (String, String) -> Bool = {name, find in
    if name.contains(find) {
        return true
    }
    return false
}

let isStartSometext: (String, String) -> Bool = {name, find in
    if name.first?.description == find{
        return true
    }
    return false
}

func find(findString: String, condition: (String, String) -> Bool) -> [String]{
    var newNames = [String]()
    
    for name in names{
        if condition(name, findString){
            newNames.append(name)
        }
    }
    return newNames
}

find(findString: "a", condition: containsSomeText)
find(findString: "a", condition: isStartSometext)


var names = ["Chris", "Alex", "Ewa", "Barry", "Daniella"]

// sort
names.sort { (lhs, rhs) -> Bool in
    return lhs > rhs
}

names.sort(by: {$0 > $1} )

names.sort() { $0 > $1 }

names.sort{ $0 > $1 }

names.sort(by : > )













